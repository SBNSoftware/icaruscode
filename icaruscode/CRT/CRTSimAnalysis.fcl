
#include "services_common_icarus.fcl"
#include "services_icarus_simulation.fcl"
#include "crtbacktracker_icarus.fcl"

process_name: CRTAnalysis

services:
{

  TFileService:           { fileName: "CRTSimAnalysis.root" }

  TimeTracker:            {}

  message:                @local::icarus_message_services_prod_debug
                          @table::icarus_common_services

} # services

source:
{
  module_type: RootInput

  # Number of events to analyze; "-1" means all of the events in the input
  # file. You can override this value with the "-n" option on the command line. 
  maxEvents:  -1 

  # I've commented this out, but if you want to include the name of
  # an art::Event input file in a script, here's how you do it.
  # fileNames: ["myinput.root"]
}

outputs:{}

physics:
{
  analyzers:
  {
    CRTSimAnalysis: 
    {

      module_type:     "CRTSimAnalysis"

      SimulationLabel: "largeant"

      AuxDetSimProducerLabel: "genericcrt"

      CRTSimHitLabel:   "crthit"

      CRTTrueHitLabel:   "crttruehit"

      CRTDetSimLabel:  "crtdaq"

      PDGs:                   [ 0 ]
      MinMomenta:             [ 0.2 ]
      MaxMomenta:             [ 0 ]
 
      #PDGs:                     [ 13, -13 ]       #Request that the particle passing through the CRTs has a specific PDG.  You can specify multiple PDGs.  Specify 0 for any PDG
      #MinMomenta:             [ 0 , 0 ]    #Minimum momentum of particle(s) passing through thet CRTs.  Specify 0 to ignore min momentum.  Vector should be same length as PDG
      #MaxMomenta:             [ 0, 0 ]    #Same but for maximum momentum

      CRTBackTrack: @local::standard_crtbacktracker

    }
  }

  # Schedule job step(s) for execution by defining the analysis module
  # for this job. An 'analysis' module (as opposed to a 'producer' or
  # a 'filter') does not alter the contents of events in the input
  # file, nor does it create any events as output. Any step names
  # listed here must match a name in the 'analyzers' section above.

  analysis: [ CRTSimAnalysis ]

  # "end_paths" is a keyword and contains the modules that do not modify the art::Event;
  # i.e., analyzers and output streams.

  end_paths: [ analysis ]
}

