#include "services_common_icarus.fcl"
#include "crtt0matchingalg_icarus.fcl"
#include "services_icarus_simulation.fcl"
#include "simulationservices.fcl"
#include "backtrackerservice.fcl"
#include "crtt0tagging.fcl"



process_name: CRTT0Tagging

services:
{
  # Load the service that manages root files for histograms.
  TFileService:           { fileName: "crtt0tagging_hist.root" }
  ParticleInventoryService:   @local::standard_particleinventoryservice
  BackTrackerService:         @local::standard_backtrackerservice       # from `backtrackerservice.fcl` (`larsim`)
  message:                @local::icarus_message_services_prod_debug
                          @table::icarus_common_services

} # services
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "daq:simpleSC"

source:
{
  module_type: RootInput

  # Number of events to analyze; "-1" means all of the events in the input
  # file. You can override this value with the "-n" option on the command line. 
  maxEvents:  -1 

}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_%tc_reco.root"
    dataTier: "reconstructed"
    saveMemoryObjectThreshold: 0
    compressionLevel: 1
    fastCloning: false
  }
}

# The 'physics' section defines and configures some modules to do work on each event.
physics:
{
  producers:
  {
    CRTT0Tagging: @local::standard_crtt0taggingmc
  }

  # Schedule job step(s) for execution by defining the analysis module for this job.
  reco: [ CRTT0Tagging ]

  stream1: [ out1 ]

  trigger_paths: [reco]

  # "end_paths" is a keyword and contains the modules that do not modify the art::Event;
  # i.e., analyzers and output streams.
  end_paths: [ stream1 ]

}
