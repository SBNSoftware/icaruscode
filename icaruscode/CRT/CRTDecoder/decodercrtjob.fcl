#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"
#include "crt_decoderdefs_icarus.fcl"
#include "decoderdefs_icarus.fcl"

process_name: crtdecoder

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hist.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
#  RandomNumberGenerator: {} #ART native random number generator
  IICARUSChannelMap:        @local::icarus_channelmappinggservice	
                            @table::icarus_calibration_services
                            @table::icarus_wirecalibration_services

  #FileCatalogMetadata:  @local::art_file_catalog_mc
 #  @table::icarus_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
 # timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   -1          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   daqCRT: @local::crtdaq_icarus
   daqTrigger: @local::decodeTriggerV2
   triggerconfig: @local::extractTriggerConfig
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 daq: [ triggerconfig, daqTrigger, daqCRT]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [daq] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "test.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
physics.producers.daqTrigger.DecoderTool.TrigConfigLabel: triggerconfig
#services.IICARUSChannelMap.ChannelMappingTool: @local::ChannelMappingPostGres
