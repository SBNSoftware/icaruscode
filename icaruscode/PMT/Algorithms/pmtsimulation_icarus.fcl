#
# File:    pmtsimulation_icarus.fcl
# Purpose: Presets for configuration of ICARUS PMT channel digitization.
# 
# Configurations offered:
# 
# * `PMTsimulationAlg` algorithm:
#     * `icarus_pmtsimulationalg_standard`: main configuration, expected to be
#       used in production and by the general user
#     * `icarus_pmtsimulationalg_202202`: a general use configuration,
#       including dark and electronics noise; `noise` and `nonoise` variants
#       (the latter with dark and electronics noise disabled)
#     * `icarus_pmtsimulationalg_2018`: legacy configuration (until June 2022),
#       including dark and electronics noise; `noise` and `nonoise` variants
#       (the latter with dark and electronics noise disabled)
# 
# Usage:
# 
# * `PMTsimulationAlg` algorithm configuration needs to be included verbatim
#     into the configuration of `SimPMTIcarus` module
#    
#
# Changes:
# 20181024 (petrillo@slac.stanford.edu)
#   detached from `opdetsim_pmt_icarus.fcl`
# 20200212 (petrillo@slac.stanford.edu)
#   reconnected quantum efficiency to the value in `opticalproperties_icarus.fcl`
# 20210206 (petrillo@slac.stanford.edu)
#   added explicit noise configuration, and made standard an alias of it
# 20210212 (petrillo@slac.stanford.edu)
#   updated baseline to reflect the one in data
# 20210615 (petrillo@slac.stanford.edu)
#   updated PMT readout enable window to 2 ms
# 20220706 (petrillo@slac.stanford.edu)
#   introduced configuration for SPR 202202
# 20240125 (petrillo@slac.stanford.edu)
#   introduced experimental setting PMT gain to 7.5 x 10^6 (and q.e. elsewhere)
#

#include "opticalproperties_icarus.fcl"

BEGIN_PROLOG

################################################################################
###  Configurations for `PMTsimulationAlg`
################################################################################

### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Detector and readout parameters
### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

icarus_settings_opdet_2022: {
  
  nominalPMTgain: 9.7e6  # PMT multiplication gain factor
  
  # the actual readout window size for each "trigger" on the readout electronics
  readoutWindowSize:         5000   # ticks (2 ns each --> 10 us)

  # fraction of readout window size that should come before the "trigger" in the
  # readout electronics
  readoutPreTrigFraction:   0.3   # fraction (3+7 us)
  
  NoiseRMS:                 3.0   # in ADC#; "temporary" value, see SBN DocDB 19187
  
  NominalPedestal:      14999.5   # in ADC#; try to balance rounding errors
  
} # icarus_settings_opdet_2022


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the following is based on `icarus_settings_opdet_2022` rescaling it to gain
# 7.5x10^6; this is an empirical choice attempting to reconciliate the mean
# value of MC hit amplitude with data; see e.g. SBN DocDB 34640
icarus_settings_opdet_202401patch: {
  
  @table::icarus_settings_opdet_2022
  
  nominalPMTgain: 7.5e6  # PMT multiplication gain factor
  
} # icarus_settings_opdet_202401patch


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# settings used in the standard configurations:
icarus_settings_opdet: @local::icarus_settings_opdet_202401patch



### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Single photoelectron response configurations
### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# single photoelectron response with a Gaussian rise and a fall shape.
# 
# Parameters are as used since forever to at least v08_46_00.
# 
icarus_photoelectronresponse_gaussian: {
  
  # run `lar --print-description AsymGaussPulseFunctionTool` for configuration
  tool_type: AsymGaussPulseFunctionTool
  
  TransitTime:               "55.1 ns"
  RaiseTime:                 "3.8 ns"
  FallTime:                  "13.7 ns"
  MeanAmplitude:             "0.9 pC"
  ADC:                       -11.1927       #charge to adc factor
  
} # icarus_photoelectronresponse_gaussian


#
# Single photoelectron response with exponential rise and a fall shapes.
# 
# Parameters are reworked from an ICARUS trigger note (not yet released as
# of April 2020), which come from data analysis from the BNL group.
# 
# In particular, raise and fall times are reported to be 1.4 and 3.2 ns for
# the PMT, and 1.8 and 4.2 ns including the cable distortion at CERN (10 m),
# which is not the setup of the actual ICARUS detector (37 m).
# The average gain is considered to be 7 x 10^6 (somehow lower than the nominal
# 10^7 which we had targetted).
# Attenuation from the cable is considered negligible.
# 
# The peak charge is computed starting from the charge of a photoelectron
# (-1.6 x 10^-7 pC), multiplied by the gain (7 x 10^6). At signal peak time,
# the current from that charge is -0.14 mA, i.e. a voltage drop on 50 ohm
# of -7.07 mV. In this parametrisation, we inject the gain and let the code
# compute the amplitude.
# The digitizer converts a range up to 2 volt with 14 bit, which translates into
# about 8.192 ADC/mV and 409.6 ADC/mA.
# In short, the peak signal is expected to be -7.07 mV, -0.14 mA, -57.93 ADC.
# 
# The integral of the shape is 191.407 ADC (time 0 to infinity, 2 ns sampling).
# 
icarus_photoelectronresponse_exponentials: {
  
  # run `lar --print-description AsymGaussPulseFunctionTool` for configuration
  tool_type: AsymExpPulseFunctionTool
  
  TransitTime:               "55.1 ns"
  RaiseTimeConstant:         "1.8 ns"
  FallTimeConstant:          "4.2 ns"
  Gain:                      @local::icarus_settings_opdet.nominalPMTgain  # Gain = 7.0e6 => PeakCurrent: -0.14144 mA
  ADC:                       409.6  # ADC / mA
  
} # icarus_photoelectronresponse_exponentials


#
# Single photoelectron response from data.
# 
icarus_photoelectronresponse_202202: {
  
  tool_type: SampledWaveformFunctionTool
  
  WaveformData: "Responses/SPR202202.txt"
  TransitTime:  "55.1 ns"
  Gain:          @local::icarus_settings_opdet.nominalPMTgain
  
} # icarus_photoelectronresponse_202202


#
# Custom photoelectron response.
# 
# This is just an example for an arbitrary function shape; the example tries to
# reproduce an `AsymGaussPulseFunction`.
# The names of the parameters are arbitrary and their value must be numerical.
# 
icarus_photoelectronresponse_customexample: {
  
  # run `lar --print-description CustomPulseFunctionTool` for configuration
  tool_type: CustomPulseFunctionTool
  
  ShapeFormula:
    "[ADC] * [MeanAmplitude] * exp(-0.5*((x - [TransitTime])/((x < [TransitTime])? [RaiseTime]: [FallTime]))**2)"
  PeakTime: "[TransitTime]"
  Parameters: {
    TransitTime:               55.1
    RaiseTime:                 3.8
    FallTime:                  13.7
    MeanAmplitude:             0.9
    ADC:                       -11.1927
  } # parameters
  
} # icarus_photoelectronresponse_customexample


#
# pick one
#
icarus_photoelectronresponse_standard: @local::icarus_photoelectronresponse_202202


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Electronics noise configurations
### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pedestal noise generator tool configuration:
icarus_pmt_electronicsnoise_gauss: {
  tool_type: PMTgausNoiseGeneratorTool
  RMS:       @local::icarus_settings_opdet.NoiseRMS
}

icarus_pmt_electronicsnoise_gauss_fast: {
  tool_type: PMTfastGausNoiseGeneratorTool
  RMS:       @local::icarus_settings_opdet.NoiseRMS
}

icarus_pmt_electronicsnoise_nonoise: {
  tool_type: PMTnoNoiseGeneratorTool
}

# icarus_pmt_electronicsnoise_standard is always the current favourite
icarus_pmt_electronicsnoise_standard: @local::icarus_pmt_electronicsnoise_gauss_fast


# pedestal generator tool configuration (uses the pedestal noise generator too):
icarus_pmt_pedestal_gaussnoise: {
  tool_type: PMTconstantPedestalGeneratorTool
  Pedestal:       @local::icarus_settings_opdet.NominalPedestal
  NoiseGenerator: @local::icarus_pmt_electronicsnoise_gauss
} # icarus_pmt_pedestal_gaussnoise

icarus_pmt_pedestal_fastgaussnoise: {
  @table::icarus_pmt_pedestal_gaussnoise
  NoiseGenerator: @local::icarus_pmt_electronicsnoise_gauss_fast
} # icarus_pmt_pedestal_fastgaussnoise

icarus_pmt_pedestal_nonoise: {
  @table::icarus_pmt_pedestal_gaussnoise
  NoiseGenerator: @local::icarus_pmt_electronicsnoise_nonoise
} # icarus_pmt_pedestal_nonoise

icarus_pmt_pedestal_standard: @local::icarus_pmt_pedestal_fastgaussnoise


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
###
### Configuration preset components
###
icarus_pmtsimulation.disable_noise: {
  Pedestal:                  @local::icarus_pmt_pedestal_nonoise
  DarkNoiseRate:             "0 kHz"
} # icarus_pmtsimulation.disable_noise


################################################################################
###
### The standard configuration (`icarus_pmtsimulationalg_standard`) is chosen
### below.
###
###


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Configuration "2022":
###  * based on SPR202202
###  * gain: 9.7 x 10^6
###  * electronics noise included
###  * readout is fundamentally different from the real one: the hardwware readout
###    collects channels in groups of 180 (full cryostat in Run1, may change in future)
###    based on a trigger logic (channels above a O(10) p.e. threshold); the simulation
###    instead does not assume a readout trigger logic and tries to read out every
###    photoelectron (each channel independently, against a << 1 p.e. threshold);
###    the part that is not included in the simulation but would be included in data
###    is comprised only of noise (and exceptionally low response fluctuations of single
###    photoelectrons), so post-processing can trim and extend the this simulation to
###    reflect the real readout by removing the channels in the regions (cryostats)
###    that would not be triggered, and generating the missing waveforms with noise.
###    The single photoelectron response 202202 used in the simulation is 800 samples
###    (1.6 us) long; since every single photoelectron "triggers" the simulation, each
###    waveform will end with pure noise. With the current setting of a 4 us buffer
###    we have about 1 us of noise in the pre-trigger buffer, 1.6 us of signal and then
###    1.4 us of noise (additional photoelectrons in these 4 us would just effectively
###    extend the "signal" part). All this considered, we keep the PMT readout buffer
###    in the simulation 1+3 us, sizeably smaller than the 3+7 us used in the hardware
###    for Run1, to save space (using 3+7, we would still have 1.6 us of signal,
###    and the 3 us before and 5.4 us after it would still be pure noise).
###    Likewise, we don't attempt to cover the full beam gate time like in hardware
###    (7+21 us in Run1 settings), since all the signal will be included anyway.
###    But we do force all 360 channels to take data at beam gate time ("only" for
###    1+21 us around the beam gate opening though).
###

icarus_pmtsimulationalg_202202_noise: {

  Pedestal:                  @local::icarus_pmt_pedestal_standard
  
  SinglePhotonResponse:      @local::icarus_photoelectronresponse_standard
  
  DarkNoiseRate:             "1.6 kHz"      # per channel, from CERN test stand measurement

  ## This is the readout window size for each "trigger" on the electronics
  ReadoutWindowSize:         2000           # ticks (2 ns each --> 4 us)

  ##fraction of readout window size that should come before the "trigger" on the electronics
  PreTrigFraction:           0.25           # fraction (1+3 us)

  ##Threshold in ADC counts for a PMT self-trigger.
  # 15 ADC = 5x 3 ADC (RMS, see ElectronicsNoise above),~55% of standard SPR (4 mV, 33 ADC);
  # number of noise samples above 15 ADC: ~206 samples for 2 ms x 360 channels (300 Hz)
  # number of noise samples above 18 ADC: ~0.36 samples for 2 ms x 360 channels (0.5 Hz)
  ##NOTE this is assumed to be positive-going and ABOVE BASELINE! Pulse polarity is corrected before determining trigger.
  ThresholdADC:              18             # ADC counts
  DiscrimAlgo:               AboveThreshold # keep all samples above threshold

  PulsePolarity:             -1             #Pulse polarity (1 = positive, -1 = negative)
  TriggerOffsetPMT:          "-1.0 ms"      # PMT enable gate start: time relative to trigger when readout begins
  ReadoutEnablePeriod:       "2.0 ms"       # PMT enable gate duration: time for which PMT readout is enabled
  CreateBeamGateTriggers:    true           #Option to create unbiased readout around beam spill
  BeamGateTriggerRepPeriod:  "2.0 us"       # Repetition period and number of repetitions for BeamGateTriggers:
  BeamGateTriggerNReps:      10             # should cover -7/+21 us, instead just goes -1 to 21 us)
  QE:                        @local::icarus_opticalproperties.ScintPreScale # from opticalproperties_icarus.fcl
  FluctuateGain:             true           # apply per-photoelectron gain fluctuations
  
  PMTspecs: {
    DynodeK:                   0.75           # gain on a PMT multiplication stage
                                              # is proportional to dV^k
    # relative multiplication stage resistors in Hamamatsu 5912,
    # from their datasheet; if the resistor on first stage is 17.4 R, the one on
    # the second stage is 3.4 R, etc. The value of R is not necessary.
    # Only multiplication stages are included.
    VoltageDistribution:    [ 17.4, 3.4, 5.0, 3.33, 1.67, 1.0, 1.2, 1.5, 2.2, 3.0 ]
    Gain:                   @local::icarus_settings_opdet.nominalPMTgain  # total typical PMT gain
  } # PMTspecs

} # icarus_pmtsimulationalg_202202_noise


icarus_pmtsimulationalg_202202_nonoise: {
  @table::icarus_pmtsimulationalg_202202_noise
  @table::icarus_pmtsimulation.disable_noise
}

icarus_pmtsimulationalg_202202: @local::icarus_pmtsimulationalg_202202_noise


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Configuration 202401patch:
###  * explicitly based on the configuration "2022" below
###  * gain and quantum efficiency adapted to reconciliate signal amplitude
###    (SBN DocDB 34640)
###  * gain updated to 7.5 x 10^6
###  * threshold for digitization scaled down
###

icarus_pmtsimulationalg_202401patch: {
  @table::icarus_pmtsimulationalg_202202_noise
  
  ## Threshold in ADC counts for a PMT self-trigger
  ## (actual readout simulation is still required downstream).
  # 
  # 15 ADC = 5x 3 ADC (RMS, see ElectronicsNoise above),~58% of standard SPR (3.2 mV, 26 ADC);
  # number of noise samples above 15 ADC: ~206 samples for 2 ms x 360 channels (300 Hz), +~1 MB data
  # number of noise samples above 18 ADC: ~0.36 samples for 2 ms x 360 channels (0.5 Hz), +~1 kB data
  ThresholdADC:              15             # ADC counts
  
} # icarus_pmtsimulationalg_202401patch


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
###
### Legacy configuration, pre-2022
###
icarus_pmtsimulationalg_2018: {

  Pedestal: {
    Pedestal:                  14999.5
    NoiseGenerator: {
      tool_type:                 PMTfastGausNoiseGeneratorTool
      RMS:                       3.0
    }
  } # Pedestal
  
  SinglePhotonResponse:      @local::icarus_photoelectronresponse_standard
  
  DarkNoiseRate:             "1.6 kHz"      # from CERN test stand measurement

  ##This is the readout window size for each "trigger" on the electronics
  ReadoutWindowSize:         2000           #ticks (if 2ns each --> 4us)

  ##fraction of readout window size that should come before the "trigger" on the electronics
  PreTrigFraction:           0.25           # fraction

  ##Threshold in ADC counts for a PMT self-trigger.
  # 18 ADC = 6x 3 ADC (RMS, see ElectronicsNoise above),~35% of standard SPR (55 ADC);
  # number of noise samples above 18 ADC: ~0.35 samples for 2 ms x 360 channels
  ##NOTE this is assumed to be positive-going and ABOVE BASELINE! Pulse polarity is corrected before determining trigger.
  ThresholdADC:              18             # ADC counts

  PulsePolarity:             -1             #Pulse polarity (1 = positive, -1 = negative)
  TriggerOffsetPMT:          "-1.0 ms"      #Time relative to trigger when readout begins
  ReadoutEnablePeriod:       "2.0 ms"       #Time for which pmt readout is enabled
  CreateBeamGateTriggers:    true           #Option to create unbiased readout around beam spill
  BeamGateTriggerRepPeriod:  "2.0 us"       #Repetition Period for BeamGateTriggers
  BeamGateTriggerNReps:      10             #Number of beamgate trigger reps to produce
  Saturation:                300            #in number of p.e. to see saturation effects in the signal
  QE:                        @local::icarus_opticalproperties.ScintPreScale # from opticalproperties_icarus.fcl
  FluctuateGain:             true           # apply per-photoelectron gain fluctuations
  
  PMTspecs: {
    DynodeK:                 0.75           # gain on a PMT multiplication stage
                                            # is proportional to dV^k
    # relative multiplication stage resistors in Hamamatsu 5912, from
    # JINST 13 (2018) 10, P10030 (https://doi.org/10.1088/1748-0221/13/10/P10030);
    # if the resistor on first stage is 17.4 R, the one on the second stage is 3.4 R,
    # etc. The value of R is not necessary.
    # Only multiplication stages are included.
    VoltageDistribution:    [ 17.4, 3.4, 5.0, 3.33, 1.67, 1.0, 1.2, 1.5, 2.2, 3.0 ]
    Gain:                   @local::icarus_settings_opdet.nominalPMTgain  # total typical PMT gain
  } # PMTspecs

} # icarus_pmtsimulationalg_2018


icarus_pmtsimulationalg_2018_noise: @local::icarus_pmtsimulationalg_2018


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
###
### Legacy no-noise configuration: `icarus_pmtsimulationalg_2018_nonoise`
###
###
icarus_pmtsimulationalg_2018_nonoise: {
  @table::icarus_pmtsimulationalg_2018
  @table::icarus_pmtsimulation.disable_noise
} # icarus_pmtsimulationalg_2018_nonoise


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
###
### Configuration used for standard simulation
###
#
# Includes noise.
#
icarus_pmtsimulationalg_standard: @local::icarus_pmtsimulationalg_202401patch


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_PROLOG
