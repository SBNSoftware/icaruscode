#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"

#include "decoderdefs_icarus.fcl"
#include "timing_icarus.fcl"
#include "icarus_ophitfinder.fcl"

#include "pmt-calibration.fcl"

process_name: BkgphotonsCalibration

services:
{
   TFileService:            { fileName: "%ifb_%tc-%p.root" }
   @table::icarus_geometry_services
   @table::icarus_basic_services
   DetectorClocksService: @local::icarus_detectorclocks
   IICARUSChannelMap: @local::icarus_channelmappinggservice
   PMTTimingCorrections: @local::icarus_pmttimingservice
}

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
}

# Make sure to get rid of NuRandomSvc (not thread save)
services.NuRandomService: @erase

physics:
{
   producers:
   {
      triggerconfig: @local::extractTriggerConfig
      pmtconfig:     @local::extractPMTconfig
    
      daqTrigger:    @local::decodeTriggerAutodetect   
      daqPMT:        @local::decodePMT

      ophituncorrected:  @local::icarus_ophit_data
   }

   analyzers: 
   {
     bkgcalibration: @local::pmt_bkgphotons_calibration 
   }

   my_producer_modules: [ triggerconfig, pmtconfig, daqTrigger, daqPMT, ophituncorrected ]

   ana: [ bkgcalibration ]

   end_paths: [ana]
}

### REQUIRED PRODUCERS ###
physics.producers.daqTrigger.DecoderTool.Decoders[0].ToolConfig.TrigConfigLabel: triggerconfig
physics.producers.daqTrigger.DecoderTool.Decoders[1].ToolConfig.TrigConfigLabel: triggerconfig
physics.producers.daqTrigger.DecoderTool.Decoders[2].ToolConfig.TrigConfigLabel: triggerconfig
physics.producers.daqPMT.PMTconfigTag: pmtconfig # required
physics.producers.daqPMT.TriggerTag:   daqTrigger # required

physics.producers.daqPMT.RequireBoardConfig: false
physics.producers.daqPMT.RequireKnownBoards: false

## CALIBRATION CONFIGURATION
physics.analyzers.bkgcalibration.OpHitModule: "ophituncorrected" 
physics.analyzers.bkgcalibration.TriggerModule: "daqTrigger" 
physics.analyzers.bkgcalibration.ChannelMask: [  ]  
