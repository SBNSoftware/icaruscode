#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"

#include "services_icarus_simulation.fcl"
#include "singles_icarus.fcl"

#include "services_icarus.fcl"
#include "largeantmodules_icarus.fcl"

#include "detsimmodules.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"

#include "lightsource.fcl"

process_name: LibraryBuild

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "PhotonLibraryFile.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
                @table::icarus_simulation_services
  BackTrackerService:  @local::standard_backtrackerservice # defined in backtracker.fcl
  ParticleInventoryService: @local::standard_particleinventoryservice

  OpDetResponseInterface:  @local::standard_opdetresponse
}

services.PhotonVisibilityService: @local::standard_photonvisibilityservice_buildlib
services.PhotonVisibilityService.DoNotLoadLibrary: true
services.PhotonVisibilityService.LibraryBuildJob: true
services.PhotonVisibilityService.UseCryoBoundary: false

//version51 e 27Sep
//services.PhotonVisibilityService.XMin: 230	#-300
//services.PhotonVisibilityService.XMax: 250	#-150
//services.PhotonVisibilityService.YMin: -35 	#-150 
//services.PhotonVisibilityService.YMax: -15	#150
//services.PhotonVisibilityService.ZMin: -10	#-1000
//services.PhotonVisibilityService.ZMax: 10	#1000

//version51_near e senza crt e arcathode
//services.PhotonVisibilityService.XMin: 320	#-300
//services.PhotonVisibilityService.XMax: 340	#-150
//services.PhotonVisibilityService.YMin: -35 	#-150 
//services.PhotonVisibilityService.YMax: -15	#150
//services.PhotonVisibilityService.ZMin: -10	#-1000
//services.PhotonVisibilityService.ZMax: 10	#1000

//version test_final
services.PhotonVisibilityService.XMin: -366	
services.PhotonVisibilityService.XMax: -66	
services.PhotonVisibilityService.YMin: -210 	 
services.PhotonVisibilityService.YMax: 180	
services.PhotonVisibilityService.ZMin: -995	
services.PhotonVisibilityService.ZMax: 965	

//services.PhotonVisibilityService.NX: 4	 
//services.PhotonVisibilityService.NY: 4	
//services.PhotonVisibilityService.NZ: 4	

services.PhotonVisibilityService.NX: 60	 
services.PhotonVisibilityService.NY: 78	
services.PhotonVisibilityService.NZ: 392	

#services.Geometry.GDML: "test_final.gdml"

# services.PhotonVisibilityService: @local::standard_photonvisibilityservice
# services.LArFFT: ""
 services.SignalShapingServiceICARUS: @erase

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   100000           # Number of events to create
#  maxEvents:   64           # Number of events to create
#  maxEvents:   4680           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_lightsource	  
   largeant:  @local::icarus_largeant	  
 }

 analyzers:
 {
   pmtresponse: @local::standard_simphotoncounter
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant ] 
 analyzeIt:  [ pmtresponse ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt]  
}


# Begin optical specific parts:

# set quantum efficiency supressed scint yield to 0.03 * 24000 
services.LArPropertiesService.ScintYield: 24000

# enable optical physics in LArG4
 services.LArG4Parameters.EnabledPhysics: [ "Em", 
						"Optical", 
						"SynchrotronAndGN", 
						"Ion", 
						"Hadron", 
						"Decay", 
						"HadronElastic", 
						"Stopping", 
						"NeutronTrackingCut" ]

# enable this custom physics list
services.LArG4Parameters.UseCustomPhysics: true

physics.producers.generator.N: 400000


# do not allow lightsource to write output into root file
//physics.producers.generator.FillTree: true 
physics.producers.generator.FillTree: false 
physics.analyzers.pmtresponse.MakeAllPhotonsTree: false 

physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: false	
physics.analyzers.pmtresponse.MakeSimPhotonsTree: false	
physics.analyzers.pmtresponse.MakeEventsTree: false	
physics.analyzers.pmtresponse.MakeLightAnalysisTree: false
