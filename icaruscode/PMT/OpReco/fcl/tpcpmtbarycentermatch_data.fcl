# A script to run the producer module: TPCPMTBarycenterMatchProducer

#include "tpcpmtbarycentermatch_config.fcl"

#include "services_icarus_simulation.fcl"
#include "services_common_icarus.fcl"

process_name: TPCPMTBarycenterMatchProducer

services:
{
  # Load the service that manages root files for histograms.
  TFileService:           { fileName: "tpcpmtmatchingana.root" }
 # This constrols the display in the output of how long each job step takes for each event. 
  TimeTracker:            {}

 

  # This parameter controls the level of descriptive output from various LArSoft modules.
  message:                @local::icarus_message_services_prod_debug
                          @table::icarus_common_services

} # services


outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_%tc_TPCPMTBarycenterMatch.root"
    dataTier: "reconstructed"
    saveMemoryObjectThreshold: 0
    compressionLevel: 1
    fastCloning: true
  }
}

# The 'physics' section defines and configures some modules to do work on each event.
physics:
{
   producers:
  {
    tpcpmtbarycentermatchCryoE: @local::data_tpcpmtbarycentermatchproducer_east
    tpcpmtbarycentermatchCryoW: @local::data_tpcpmtbarycentermatchproducer_west
  }

  # Schedule job step(s) for execution by defining the analysis module for this job.
  reco: [ tpcpmtbarycentermatchCryoE, tpcpmtbarycentermatchCryoW ]

  stream1: [ out1 ]

  trigger_paths: [reco]

  # "end_paths" is a keyword and contains the modules that do not modify the art::Event;
  # i.e., analyzers and output streams.
  end_paths: [ stream1 ]

}
