#
# Purpose: Processes generated Monte Carlo events through GEANT4 detector simulation
#          Specifically, handles both "intime" and "out of time" inputs
# 
# 
# Input
# ------
# 
# * all `simb::MCTruth` collection data products are used as input
# 
# 
# Output
# -------
# 
# * `largeant` ("legacy" `LArG4` module):
#     * `simb::MCParticle` collection: all initial, intermediate and final
#       particles propagated through the detector (exceptions apply)
#     * `sim::SimEnergyDeposit` collections: `TPCActive` and `Others`
#     * `sim::SimChannel` collection: ionisation drifted to TPC channels
#     * `sim::SimPhoton` collection: scintillation photons converting into PMT
#     * `sim::AuxDetSimChannel` collection: hits from auxiliary detectors (CRT)
# * `ionization` (`sim::SimEnergyDeposit` collection)
#


# ------------------------------------------------------------------------------
#include "services_icarus_simulation.fcl"
#include "largeantmodules_icarus.fcl"
#include "photpropservices_icarus.fcl"
#include "g4inforeducer.fcl"
#include "mcreco.fcl"

process_name: G4

services:
{
  @table::icarus_g4_services
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
}
services.Geometry.GDML: "icarus_complete_20220518_overburden.gdml"
services.Geometry.ROOT: "icarus_complete_20220518_overburden.gdml"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
    larg4outtime:  @local::icarus_largeant
    largeant: {
      module_type: "MergeSimSourcesSBN"
      InputSourcesLabels: [ "larg4intime","larg4outtime"]
      TrackIDOffsets: [ 10000000,20000000 ]
    }
    ionization: {
                  module_type: "larsim/ElectronDrift/ShiftEdepSCE"
                  EDepTag:     "largeant:TPCActive"
                  MakeAnaTree: false
                }
    sedlite:    @local::sbn_largeant_info_reducer # needs to run right after largeant
         
    # Saving MC information needed for the ML effort
    mcreco:     @local::standard_mcreco

   rns:      { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 merge: [rns, larg4outtime, largeant, ionization, sedlite, mcreco]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_g4.root"
   dataTier:    "g4"
   compressionLevel: 1
   outputCommands: [ "keep *_*_*_*",
                     "drop *_larg4intime_*_*",
                     "drop *_larg4outtime_*_*"]
   dropMetaDataForDroppedData: true
   saveMemoryObjectThreshold: 0
 }
}

services.LArG4Parameters.ParticleKineticEnergyCut: 0.0005
physics.producers.larg4outtime.KeepParticlesInVolumes: [ "volDetEnclosure" ]
physics.producers.larg4outtime.InputLabels: [ "GenInTimeSorter:outtime" ]

# Store MCParticleLite in G4 to store dropped particles from KeepEMShowerDaughters: false
physics.producers.larg4outtime.StoreDroppedMCParticles: true

# ------------------------------------------------------------------------------

# Configure mcreco to read SEDLite instead of SED and MCParticleLite in addition to MCParticle
physics.producers.mcreco.SimChannelLabel: "sedlite"
physics.producers.mcreco.MCParticleLabel: "largeant"
physics.producers.mcreco.MCParticleLiteLabel: "largeant"
physics.producers.mcreco.UseSimEnergyDeposit: false
physics.producers.mcreco.MCRecoPart.SavePathPDGList: [13,-13,211,-211,111,311,310,130,321,-321,2212,2112,2224,2214,2114,1114,3122,1000010020,1000010030,1000020030,1000020040]
physics.producers.mcreco.UseSimEnergyDepositLite: true
physics.producers.mcreco.IncludeDroppedParticles: false

services.message.destinations :
{
  STDCOUT:
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
      ## Turning off the spewing of warnings coming from these two modules
       SimDriftElectrons:
       {
         limit: 0
         reportEvery: 0
       }
       McReco:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: 5  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
