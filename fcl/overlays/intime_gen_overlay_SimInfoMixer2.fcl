#include "icarus_siminfomixer.fcl"
#include "local_gen_include.fcl"

//========================================

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gen_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
}

process_name : SimInfoMixer2     #The process name must NOT contain any underscores

source:
{
  module_type: RootInput
  saveMemoryObjectThreshold: 0
  maxEvents: -1
}

outputs: {
  out: { module_type: RootOutput
  	 fileName: "%ifb_%tc_simmxd2.root"
	 compressionLevel: 1
	 dataTier: "generated"
         SelectEvents: ["mixer_path"]
       }
}

physics: {

  producers : {
  }

  analyzers: {
  }

  filters : {
    GenInTimeSorter: @local::icarus_siminfomixer
    larg4intime: @local::icarus_siminfomixer
  }

  mixer_path : [ GenInTimeSorter, larg4intime ]
  trigger_paths : [ mixer_path ]

  output : [ out ]
  end_paths: [ output ]

}

##<module_label>:<optional instance name>:<optional process name>
physics.filters.larg4intime.SimInputFileNames : [ "genfile.root.local" ]

physics.filters.larg4intime.SimEnergyDepositInputModuleLabels: ["larg4intime:Other:CosmicsCorsikaPGenAndG4InTime"] #Other
physics.filters.GenInTimeSorter.MCTruthInputModuleLabels: ["GenInTimeSorter:outtime:CosmicsCorsikaPGenAndG4InTime"] #std::vector<simb::MCTruth> outtime
