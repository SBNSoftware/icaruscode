#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"

#include "correctionservices_icarus.fcl"
#include "particleinventoryservice.fcl"
#include "backtrackerservice.fcl"
#include "photonbacktrackerservice.fcl"
#include "mccheatermodules.fcl"
#include "crtsimmodules_icarus.fcl"

#include "cafmaker_defs.fcl"

process_name: CAFmaker

services:
{
  ParticleInventoryService:  @local::standard_particleinventoryservice
  BackTrackerService:        @local::standard_backtrackerservice
  @table::icarus_wirecalibration_minimum_services
  @table::icarus_random_services  # from services_common_icarus.fcl

  SpaceChargeService: @local::icarus_spacecharge
}

outputs:
{
  outpid:
  {
    dataTier: cafana # for grid
    streamName: out1 # for grid
    module_type: RootOutput
    fileName:    "stage2_r%r_s%s.root"
    saveMemoryObjectThreshold: 0
  }
}

physics:
{

  producers: {
    @table::caf_preprocess_producers
  }

  runprod: [ @sequence::caf_preprocess_sequence, cafmaker]
  stream1:       [  ]
  trigger_paths: [ runprod ]
  end_paths:     [ stream1 ]
}

# MCT0Offset for MC ()
# ref1 : https://github.com/SBNSoftware/icaruscode/blob/v09_37_02_01/icaruscode/CRT/crtsimmodules_icarus.fcl#L11
# ref2 : https://github.com/SBNSoftware/icaruscode/blob/v09_64_01/icaruscode/CRT/crttruehitproducer.fcl#L8
# physics.producers.cafmaker.CRTSimT0Offset: @local::standard_icarus_crtsimalg.GlobalT0Offset
# instead, apply this^ offset in CRTHitRecoAlg.cc, see https://github.com/SBNSoftware/icaruscode/pull/660

# Blinding not needed for MC
physics.producers.cafmaker.CreateBlindedCAF: false
# MC times are already measured w.r.t. the beam gate
physics.producers.cafmaker.ReferencePMTFromTriggerToBeam: true
# FlashMatcher Cryo suffixes
physics.producers.cafmaker.FlashMatchSCECryoSuffixes: ["CryoE", "CryoW"]
