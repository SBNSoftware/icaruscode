#include "simulationservices.fcl"
#include "backtrackerservice.fcl"
#include "photonbacktrackerservice.fcl"

BEGIN_PROLOG

#
# Configuration for LArG4Parameters service
#
# Use as:
#
#     service.LArG4Parmeters: @local::icarus_largeantparameters
#
#

icarus_largeantparameters:                       @local::standard_largeantparameters # from simulationservices.fcl
icarus_largeantparameters.UseCustomPhysics:      true
icarus_largeantparameters.LongitudinalDiffusion: 4.0e-9  #in cm^2/ns
icarus_largeantparameters.TransverseDiffusion:   8.8e-9  #in cm^2/ns
icarus_largeantparameters.ElectronClusterSize:   20.0    #number of ionization electrons to drift in a unit
icarus_largeantparameters.EnabledPhysics:        [ "Em", "SynchrotronAndGN", "Ion", "Hadron",
                                                   "Decay", "HadronElastic", "Stopping"
                                                   , "FastOptical"           # either: use photon library
                                                   # , OpFastScintillation   #     or: let Geant4 do the work (for photon visibility library generation)
                                                   # , "NeutronTrackingCut"  # if NeutronTrackingCut is enabled, neutrons will be cut
                                                 ]
icarus_largeantparameters.FillSimEnergyDeposits: true
icarus_largeantparameters.UseModLarqlRecomb:     true   # use LArQL recombination corrections (dependence on EF)
icarus_largeantparameters.IonAndScintCalculator: "Correlated" # adopt the "correlated" model for ionization and scintillation (SBN DocDB 17964)

#
# ICARUS LArVoxelCalculator service configuration.
#
# Use as:
#
#     services.LArVoxelCalculator: @local::icarus_larvoxelcalculator
#
#
icarus_larvoxelcalculator: {
    VoxelSizeX:     0.03    #in cm
    VoxelSizeY:     0.03    #in cm
    VoxelSizeZ:     0.03    #in cm
    VoxelSizeT:     5000.0  #in ns
    VoxelOffsetX:   0.0     #in cm
    VoxelOffsetY:   0.0     #in cm
    VoxelOffsetZ:   0.0     #in cm
    VoxelOffsetT:   -2500.0 #in ns
    VoxelEnergyCut: 1.e-6   #in GeV
}



#
# Backtracking services
#
# All serviced needed for service-driven backtracking
# Use as:
#
# services: {
#   ...
#   @table::icarus_backtracking_services
#   ...
# }
#
icarus_backtracking_services: {
    BackTrackerService:         @local::standard_backtrackerservice       # from `backtrackerservice.fcl` (`larsim`)
    PhotonBackTrackerService:   @local::standard_photonbacktrackerservice # from `photonbacktrackerservice.fcl` (`larsim`)
    ParticleInventoryService:   @local::standard_particleinventoryservice
} # icarus_backtracking_services


END_PROLOG
