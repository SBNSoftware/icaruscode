## 
##  Shared art job configuartions for ICARUS reco
##
#include "reco_icarus.fcl"
#include "services_common_icarus.fcl"
#include "simulationservices_icarus.fcl"
#include "correctionservices_icarus.fcl"
#include "calibrationservices_icarus.fcl"

process_name: McRecoICARUS

services:
{
  @table::icarus_common_services
  @table::icarus_wirecalibration_services
  @table::icarus_backtracking_services # from `simulationservices_icarus.fcl`
  SpaceChargeService: @local::icarus_spacecharge
}

#source is a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
     @table::icarus_reco_producers
 }

 filters:
 { 
     @table::icarus_reco_filters
 }

 #reco sequence and trigger_paths to be defined elsewhere

 stream1:  [ out1 ]
 end_paths:     [stream1]  

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   dataTier: "reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

### Here we try to suppress known and pointless messages
### See https://cdcvs.fnal.gov/redmine/projects/messagefacility/wiki for details
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}

physics.producers.mcophit.SimPhotonsProducer: "largeant"
