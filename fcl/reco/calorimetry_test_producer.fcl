#include "seedservice.fcl"
#include "singles.fcl"
#include "larproperties.fcl"
#include "magfield_larsoft.fcl"
#include "FilterNeutrinoActive.fcl"
#include "FilterNeutrinoInteraction.fcl"
#include "largeantmodules.fcl"
#include "genie_icarus.fcl"
#include "mcreco.fcl"
#include "services_common_icarus.fcl"
#include "services_icarus_simulation.fcl"
#include "calorimetry_icarus.fcl"
#include "correctionservices_icarus.fcl"
#include "particleid.fcl"
#include "calorimetry_icarus.fcl"
#include "analysistreemodule.fcl"

process_name: CaloTest

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::icarus_common_services
@table::icarus_wirecalibration_services
@table::icarus_backtracking_services
}


icarus_chi2pid:
{
 module_type:            "Chi2ParticleID"
 TrackModuleLabel:       "spacepts"
 CalorimetryModuleLabel: "calo"
 Chi2PIDAlg:             @local::standard_chi2pidalg
}




#Start each new event with an empty event.
source:
{
  module_type:     RootInput
  maxEvents:       10          # Number of events to create
  firstRun:        1           # Run number to use for this file
  firstEvent:      1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
producers:
{
  calorimetry: @local::icarus_gnewcalomc
}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ calorimetry ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ reco ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_calorecoraw.root"
   dataTier:    "reconstructed"
   #outputCommands:  ["keep *_*_*_*", "drop *_*_*_*"] 
#, "drop *_largeant_*_*" ]
   outputCommands:  [ "keep *_*_*_*" ]
   compressionLevel: 1
   fastCloning: false
   saveMemoryObjectThreshold: 0
 }
}




services.SpaceChargeService: @local::icarus_spacecharge
#services.DetectorPropertiesService.Electronlifetime: 2000   
physics.producers.calorimetry.SpacePointModuleLabel: "pandoraICARUSCryo0" 
physics.producers.calorimetry.CaloAlg.CalAreaConstants: [ 1.46e-2, 1.46e-2, 1.46e-2 ]
physics.producers.calorimetry.TrackModuleLabel: "pandoraTrackICARUSCryo0"
physics.producers.calorimetry.CorrectSCE: "false"

